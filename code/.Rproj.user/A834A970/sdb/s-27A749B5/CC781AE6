{
    "collab_server" : "",
    "contents" : "# Assignment 7\n#setwd(\"~/Documents/UF PhD/Fall, 2017/GLY6932/Assignments/Lab 7\")\nrm(list=ls())\nif(!is.null(dev.list())) dev.off()\n\n####################################################\n#\n# Assignment 7 (randomization and bootstrap)\n#\n# Examples of a univariate two-sample problem\n#\n# Michal Kowalewski, kowalewski@ufl.edu\n#\n# Last updated: November 3, 2016\n#\n#####################################################\n\n# This assignment uses an example of a simple function for \n# randomization and bootstrap using a simple datasets.\n# Note that we implement here the simplest approach\n# based on percentile (or \"naive\") protocol.\n# More commplicated approaches (e.g., accelerated bias correction)\n# are often implemented in more advanced scripts and functions.\n# This is a two-sample univariate example for testing central tendency\n# null hypothesis: mean(s1)==mean(s2)\n\n# A resampling function 'F.1' is provided here for your use\n# 'x1' should be a vector of numerical values representing the first sample\n# 'x2' should be a vector of numerical values representing the second sample\n# 'times' defines number of iterations\n# 'boot' defines the method. The default is bootstrap (boot=T)\n# To carry out randomization set boot to 'F'\n# 'include' determines if the actual data are included \n# when estimating the p value\n\n# Run the function 'F.1'\nF.1 <- function(x1, x2, times, boot=T, include=T) {\n out <- vector(mode='numeric', length=times)\n obs.d <- mean(x1)-mean(x2)\n pool <- c(x1, x2)\n n1 <- length(x1)\n n2 <- length(x2)\n for (i in 1:times) {\n     RS <- sample(pool, replace=boot)\n     out[i] <- mean(RS[1:n1])-mean(RS[-(1:n1)]) \n     }\n eval <- abs(out)>=abs(obs.d) \n ifelse(include==T, p <- (sum(eval[-1])+1)/times, p <- sum(eval)/times)\n ifelse(boot==T, type <- 'bootstrapping', type <- 'randomization')\n return(list(samples=out, 'p.value'=p, method=type,\n             iterations=times))\n}\n\n\n###########################################################################\n##Segregate your data into 2 data frames\n###########################################################################\n\ncam.dat <- read.csv(\"D:/Downloads/spp_per_site(1).csv\")\n\n#Load in the dplyr library to separate the data\nlibrary(dplyr)\n\n#Now, make 1 data frame for on-trail, and 1 for off-trail\ncam.dat.on <- cam.dat %>% filter(Location == \"On-trail\")\ncam.dat.off <- cam.dat %>% filter(Location == \"Off-trail\")\n\n#Next, make a data frame for the species of interest (I'll use the agouti)\ncam.dat.on.agouti <- cam.dat.on %>% select(Agouti)\ncam.dat.off.agouti <- cam.dat.off %>% select(Agouti)\n\n#Turn the agouti data into numeric data\ncam.dat.on.agouti <- as.numeric(cam.dat.on.agouti[[1]])\ncam.dat.off.agouti <- as.numeric(cam.dat.off.agouti[[1]])\n###########################################################################\n##Run the bootstrap code\n###########################################################################\n\ncam.dat.F1.boot <- F.1(cam.dat.on.agouti, cam.dat.off.agouti, 1000)\n\n###########################################################################\n\n\n# ASSIGNMENT STARTS HERE\n\nsamp.mean<-5\nsamp.sdev<-3\n\n# TASK 1: Create two samples of numerical data (two vectors) using\n#         random number generator for normal distibution function {rnorm}.\n#\t\t The mean should be set to 5 and standard deviation should be set to 3.\n#         Samples 1 and 2 should include 5 and 3 observations, respectively.\n#         Compute the observed difference between the two sample means and\n#         store this value in a new object (e.g., obs.d1)\n\nrsamp1<-rnorm(5,samp.mean,samp.sdev)\nrsamp2<-rnorm(3,samp.mean,samp.sdev)\n\nrsamp12.mean_diff<-mean(rsamp1)-mean(rsamp2)\n\n# TASK 2: Execute function F.1 for the two samples created in Task 1\n#         Use default settings of the function (boot=T, include=T)\n#         Set times to 1000 iterations.\n#         Store the results in a new object with a new name (e.g., 'output1')\n# NOTE: This should be just one line of script (newobject <- function(objects & parameters))\n\nrsamp12.F1_boot<-F.1(rsamp1,rsamp2,1000)\n\n# TASK 3: Execute function F.1 for the two samples created in Task 1,but\n#         use randomization instead of bootstrap.\n#         Set times to 1000 iterations.\n#         Store the results in a new object with a new name (e.g., 'output2')\n# NOTE: This should be just one line of script (newobject <- function(objects & parameters))\n\nrsamp12.F1_rand<-F.1(rsamp1,rsamp2,1000,boot=F)\n\n# TASK 4: Create two new samples of numerical data (two vectors) using\n#         random number generator for normal distibution function {rnorm}.\n#\t\t The mean should be set to 5 and standard deviation should be set to 3.\n#         Samples 1 and 2 should include 105 and 73 observations, respectively.\n#         Compute the observed difference between the two sample means and\n#         store this value in a new object (e.g., obs.d2)\n\nrsamp3<-rnorm(105,samp.mean,samp.sdev)\nrsamp4<-rnorm(73,samp.mean,samp.sdev)\n\nrsamp34.mean_diff<-mean(rsamp3)-mean(rsamp4)\n\n# TASK 5: Execute function F.1 for the two samples created in Task 4.\n#         Use default settings of the function (boot=T, include=T)\n#         Set times to 1000 iterations.\n#         Store the results in a new object with a new name (e.g., 'output3')\n# NOTE: This should be just one line of script (newobject <- function(objects & parameters))\n\nrsamp34.F1_boot<-F.1(rsamp3,rsamp4,1000)\n\n# TASK 6: Execute function F.1 for the two samples created in Task 4, but\n#         use randomization instead of bootstrap.\n#         Set times to 1000 iterations.\n#         Store the results in a new object with a new name (e.g., 'output4')\n# NOTE: This should be just one line of script (newobject <- function(objects & parameters))\n\nrsamp34.F1_rand<-F.1(rsamp3,rsamp4,1000,boot=F)\n\n# TASK 7: Compute p.values for samples created in Task 1 using:\n#         (1) parametric t-test (function 't.test')\n#         (2) rank-based Wilcoxon test (function 'wilcox.test'})\n#         For each test, store p.value in a new object\n\nrsamp12.pvalue.ttest<-t.test(rsamp1,rsamp2)$p.value\nrsamp12.pvalue.wilcox<-wilcox.test(rsamp1,rsamp2)$p.value\n\n# TASK 8: Repeat TASK 7 for samples created in Task 4\n\nrsamp34.pvalue.ttest<-t.test(rsamp3,rsamp4)$p.value\nrsamp34.pvalue.wilcox<-wilcox.test(rsamp3,rsamp4)$p.value\n\n# TASK 9: Plot a four-panel plot of sampling distributions\n#   Use function {hist} to plot histograms\n#   Define the same 'breaks' for all histograms (see ?hist)\n#   Mark with arrows (see ?arrows) the location of observed values\n#   Include both positive and negative values of the location (e.g., obs.d and -obs.d)\n#   Label axes\n#   Using function 'mtext' include the following info on the plot:\n#   (1) number of iterations, (2) resampling method,\n#   (3) resampling p value, (4) t.test p value, (5) wilcoxon p value\n\nlimits.x<-c(-1*ceiling(max(abs(rsamp12.F1_boot$samples),abs(rsamp12.F1_rand$samples),abs(rsamp34.F1_boot$samples),abs(rsamp34.F1_rand$samples))),ceiling(max(abs(rsamp12.F1_boot$samples),abs(rsamp12.F1_rand$samples),abs(rsamp34.F1_boot$samples),abs(rsamp34.F1_rand$samples))))\nlimits.x<-round(limits.x,-1)\nlimits.y<-c(0,max(as.numeric(hist(rsamp12.F1_boot$samples,breaks=\"Sturges\",plot=FALSE)$counts),as.numeric(hist(rsamp34.F1_boot$samples,breaks=\"Sturges\",plot=FALSE)$counts)))\nlimits.y<-round(limits.y,-2)\n\n# To create four panel plot, use this statement\nop <- par(mfrow = c(4, 1), mar = c(4.5,4.5,0.5,0.5))\n\nhist(rsamp12.F1_boot$samples,breaks=\"Sturges\",xlim=limits.x,ylim=limits.y,col=\"black\",main=NULL,axes=FALSE,xlab=NULL,ylab=NULL)\naxis(1,at=seq(limits.x[1],limits.x[2],by=2),cex.axis=0.8,labels=TRUE)\naxis(2,at=seq(limits.y[1],limits.y[2],by=50),cex.axis=0.7,labels=TRUE)\narrows(rsamp12.mean_diff,limits.y[2]*0.75,rsamp12.mean_diff,0,length=0.05,lwd=2,col=\"red\")\narrows(-1*rsamp12.mean_diff,limits.y[2]*0.75,-1*rsamp12.mean_diff,0,length=0.05,lwd=2,col=\"red\")\nmtext(paste(\"iterations: \",rsamp12.F1_boot$iterations),cex=0.5,side=3,adj=1,line=-0.50)\nmtext(paste(\"method: \",rsamp12.F1_boot$method),cex=0.5,side=3,adj=1,line=-1.25)\nmtext(paste(rsamp12.F1_boot$method,\" p: \",signif(rsamp12.F1_boot$p.value,3)),cex=0.5,side=3,adj=1,line=-2.00)\nmtext(paste(\"t-test p: \",signif(rsamp12.pvalue.ttest,3)),cex=0.5,side=3,adj=1,line=-2.75)\nmtext(paste(\"wilcox-test p: \",signif(rsamp12.pvalue.wilcox,3)),cex=0.5,side=3,adj=1,line=-3.50)\n\nhist(rsamp12.F1_rand$samples,breaks=\"Sturges\",xlim=limits.x,ylim=limits.y,col=\"black\",main=NULL,axes=FALSE,xlab=NULL,ylab=NULL)\naxis(1,at=seq(limits.x[1],limits.x[2],by=2),cex.axis=0.8,labels=TRUE)\naxis(2,at=seq(limits.y[1],limits.y[2],by=50),cex.axis=0.7,labels=TRUE)\narrows(rsamp12.mean_diff,limits.y[2]*0.75,rsamp12.mean_diff,0,length=0.05,lwd=2,col=\"red\")\narrows(-1*rsamp12.mean_diff,limits.y[2]*0.75,-1*rsamp12.mean_diff,0,length=0.05,lwd=2,col=\"red\")\nmtext(paste(\"iterations: \",rsamp12.F1_rand$iterations),cex=0.5,side=3,adj=1,line=-0.50)\nmtext(paste(\"method: \",rsamp12.F1_rand$method),cex=0.5,side=3,adj=1,line=-1.25)\nmtext(paste(rsamp12.F1_rand$method,\" p: \",signif(rsamp12.F1_rand$p.value,3)),cex=0.5,side=3,adj=1,line=-2.00)\nmtext(paste(\"t-test p: \",signif(rsamp12.pvalue.ttest,3)),cex=0.5,side=3,adj=1,line=-2.75)\nmtext(paste(\"wilcox-test p: \",signif(rsamp12.pvalue.wilcox,3)),cex=0.5,side=3,adj=1,line=-3.50)\n\nhist(rsamp34.F1_boot$samples,breaks=\"Sturges\",xlim=limits.x,ylim=limits.y,col=\"black\",main=NULL,axes=FALSE,xlab=NULL,ylab=NULL)\naxis(1,at=seq(limits.x[1],limits.x[2],by=2),cex.axis=0.8,labels=TRUE)\naxis(2,at=seq(limits.y[1],limits.y[2],by=50),cex.axis=0.7,labels=TRUE)\narrows(rsamp34.mean_diff,limits.y[2]*0.75,rsamp34.mean_diff,0,length=0.05,lwd=2,col=\"red\")\narrows(-1*rsamp34.mean_diff,limits.y[2]*0.75,-1*rsamp34.mean_diff,0,length=0.05,lwd=2,col=\"red\")\nmtext(paste(\"iterations: \",rsamp34.F1_boot$iterations),cex=0.5,side=3,adj=1,line=-0.50)\nmtext(paste(\"method: \",rsamp34.F1_boot$method),cex=0.5,side=3,adj=1,line=-1.25)\nmtext(paste(rsamp34.F1_boot$method,\" p: \",signif(rsamp34.F1_boot$p.value,3)),cex=0.5,side=3,adj=1,line=-2.00)\nmtext(paste(\"t-test p: \",signif(rsamp34.pvalue.ttest,3)),cex=0.5,side=3,adj=1,line=-2.75)\nmtext(paste(\"wilcox-test p: \",signif(rsamp34.pvalue.wilcox,3)),cex=0.5,side=3,adj=1,line=-3.50)\n\nhist(rsamp34.F1_rand$samples,breaks=\"Sturges\",xlim=limits.x,ylim=limits.y,col=\"black\",main=NULL,axes=FALSE,xlab=NULL,ylab=NULL)\naxis(1,at=seq(limits.x[1],limits.x[2],by=2),cex.axis=0.8,labels=TRUE)\naxis(2,at=seq(limits.y[1],limits.y[2],by=50),cex.axis=0.7,labels=TRUE)\narrows(rsamp34.mean_diff,limits.y[2]*0.75,rsamp34.mean_diff,0,length=0.05,lwd=2,col=\"red\")\narrows(-1*rsamp34.mean_diff,limits.y[2]*0.75,-1*rsamp34.mean_diff,0,length=0.05,lwd=2,col=\"red\")\nmtext(paste(\"iterations: \",rsamp34.F1_rand$iterations),cex=0.5,side=3,adj=1,line=-0.50)\nmtext(paste(\"method: \",rsamp34.F1_rand$method),cex=0.5,side=3,adj=1,line=-1.25)\nmtext(paste(rsamp34.F1_rand$method,\" p: \",signif(rsamp34.F1_rand$p.value,3)),cex=0.5,side=3,adj=1,line=-2.00)\nmtext(paste(\"t-test p: \",signif(rsamp34.pvalue.ttest,3)),cex=0.5,side=3,adj=1,line=-2.75)\nmtext(paste(\"wilcox-test p: \",signif(rsamp34.pvalue.wilcox,3)),cex=0.5,side=3,adj=1,line=-3.50)\n\nmtext('No. of Replicate Samples',cex=0.8,side=2,line=2.5,adj=-3.5)\nmtext('∆ Means',cex=0.8,side=1,line=2.5,adj=0.5)\n\npar(op)\n\n# TASK 10 (OPTIONAL): Repeat TASKS 2, 3, 5, 6 (100 times each).\n#          Use a simple for loop.\n#          For each task store p.values for repeated runs (100 values per task).\n#          Plot a simple scatter plot of p.values\n#          (x = bootstrap p values, y axis = randomization p values).\n#          Scale axes so they range from 0 to 1\n#          (use parameters xlim= and ylim= in 'plot' function).\n#          Plot and label p values for t test and Wilcoxon rank test\n#\t\t  Plot a line with slope of 1 and intercept of 0 using 'abline' function\n#\t\t  Plot and label vertical and horizontal lines for alpha=0.05.\n\nrsamp.pvalues.boot = vector(mode='numeric',length=200)\nrsamp.pvalues.rand = vector(mode='numeric',length=200)\nfor(i in 1:100) {\n  rsamp.pvalues.boot[i]<-F.1(rsamp1,rsamp2,1000)$p.value\n  rsamp.pvalues.rand[i]<-F.1(rsamp1,rsamp2,1000,boot=F)$p.value\n  rsamp.pvalues.boot[i+100]<-F.1(rsamp3,rsamp4,1000)$p.value\n  rsamp.pvalues.rand[i+100]<-F.1(rsamp3,rsamp4,1000,boot=F)$p.value\n}\n\nplot(rsamp.pvalues.boot,rsamp.pvalues.rand,pch=1,cex=0.7,col=\"black\",xlim=c(0,1),ylim=c(0,1),xlab=\"bootstrap p-value\",ylab=\"randomization p-value\")\npoints(rsamp12.pvalue.ttest,rsamp12.pvalue.ttest,pch=16,col=\"green\")\ntext(rsamp12.pvalue.ttest,rsamp12.pvalue.ttest,labels=\"t-test\",cex= 0.5,pos=1,col=\"green\")\npoints(rsamp12.pvalue.wilcox,rsamp12.pvalue.wilcox,pch=16,col=\"blue\")\ntext(rsamp12.pvalue.wilcox,rsamp12.pvalue.wilcox,labels=\"wilcox rank test\",cex= 0.5,pos=1,col=\"blue\")\npoints(rsamp34.pvalue.ttest,rsamp34.pvalue.ttest,pch=16,col=\"green\")\ntext(rsamp34.pvalue.ttest,rsamp34.pvalue.ttest,labels=\"t-test\",cex= 0.5,pos=1,col=\"green\")\npoints(rsamp34.pvalue.wilcox,rsamp34.pvalue.wilcox,pch=16,col=\"blue\")\ntext(rsamp34.pvalue.wilcox,rsamp34.pvalue.wilcox,labels=\"wilcox rank test\",cex= 0.5,pos=1,col=\"blue\")\nabline(a=0,b=1,col=\"black\")\nabline(h=0.05,col=\"red\")\ntext(0.035,0.90,labels=\"alpha=0.05\",col=\"red\",cex=0.5,srt=90)\nabline(v=0.05,col=\"red\")\ntext(0.90,0.035,labels=\"alpha=0.05\",col=\"red\",cex=0.5)\n\n# SUBMIT FINAL REPORT:\n# Email your figure (TASKS 9) or figures (TASKS 9 and 10) to kowalewski@ufl.edu\n# Please send the figures as a single file in any readable format (pdf, ppt, word, etc.).\n# DUE Wednesday, November 29, 2017, 11:00AM\n\n######################### END\n",
    "created" : 1511099684779.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "39494421",
    "id" : "CC781AE6",
    "lastKnownWriteTime" : 1511122121,
    "last_content_update" : 1511122121876,
    "path" : "D:/Downloads/SeanDenney_Assign7.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}